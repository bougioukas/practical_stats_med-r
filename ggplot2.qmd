# Data visualization with ggplot2 {#sec-ggplot2}

```{r}
#| include: false

library(fontawesome)
```

In this textbook, the `{ggplot2}` package is the preferred tool for creating plots. With this tool and its extensions, R users can produce elegant, sophisticated, and professional-looking types of graphs that communicate results efficiently to the desired audience.

```{r}
#| include: false

library(ggrepel)
library(ggsci)
library(ggthemes)
#library(ggpp)
#library(ggfx)
#library(ggtext)
#library(gghighlight)
#library(ggforce)
#library(paletteer)
#library(patchwork)

#library(fontawesome)

library(tidyverse)
library(here)
```

When we have finished this chapter, we should be able to:

::: {.callout-caution icon="false"}
## Learning objectives

-   Use `ggplot2` to generate publication-ready graphics.
-   Understand the basic grammar of graphics, including the aesthetics and geometry layers, adding statistics, transforming scales, and coloring by groups.
-   Understand how to save plots in a variety of formats.
-   Find extensions for `ggplot2` to produce custom graphics.
:::

Â 

## Introduction to ggplot2

The main idea of ggplot2 is that any plot can be made up of the following principal components:

-   **data** and **coordinate system**
-   **geometric objects** such as points, bars, lines.
-   **aesthetic mappings** that describe how variables are mapped to visual properties or aesthetics (e.g., color, size, shape) of the graph.
-   **themes** that style all the visual elements which are not part of data.

The key to understanding ggplot2 is thinking about a figure in **multiple layers**.

![The ggplot figure is built layer by layer by adding new graphical elements.](images/layers.png){#fig-layers fig-align="center" width="70%"}

## Covid-19 data

In this Chapter, we will explore graphically the association between a country's wealth and COVID-19 cases. However, there more variables that may be associated to both wealth and COVID-19 cases such as testing rate. For example, wealthier countries may have a national program to distribute tests for the virus, provide advice on how to apply a self-test and report the results to a national organization. Without the resources of wealthy countries to buy and distribute tests, a lack of reported cases in developing countries could indicate a scarcity of testing. In this case, using diagrams to depict multivariable associations may be helpful.

```{r}
#| message: false
#| warning: false

library(readr)
covid_data <- read_csv(here("data", "covid_data.csv"))
```

Let's have a look at the types of variables:

```{r}
glimpse(covid_data)
```

The data frame contains `r nrow(covid_data)` rows and `r ncol(covid_data)` variables that are described as follows:

-   **iso3c:** ISO3c country code as defined by ISO 3166-1 alpha-3

-   **country:** Country name

-   **date:** Calendar date

-   **confirmed:** Confirmed Covid-19 cases as reported by JHU CSSE[^ggplot2-1] (accumulated)

-   **deaths:** Covid-19-related deaths as reported by JHU CSSE (accumulated)

-   **total_tests:** Accumulated test counts as reported by Our World in Data

-   **region:** Country region as classified by the World Bank (time-stable): East Asia & Pacific, Europe & Central Asia, Latin America & Caribbean, Middle East & North Africa, North America, South Asia, Sub-Saharan Africa.

-   **income:** Country income group as classified by the World Bank (time-stable)

-   **population:** Country population as reported by the World Bank (original identifier 'SP.POP.TOTL', time-stable)

-   **pop_density:** Country population density as reported by the World Bank (original identifier 'EN.POP.DNST', time-stable)

-   **life_expectancy** Average life expectancy at birth of country citizens in years as reported by the World Bank (original identifier 'SP.DYN.LE00.IN', time-stable)

-   **gdp_capita:** Country gross domestic product (GDP) per capita, measured in 2010 US-$\$$ as reported by the World Bank (original identifier 'NY.GDP.PCAP.KD', time-stable)

[^ggplot2-1]: JHU CSSE: Johns Hopkins Coronavirus Resource Center

### Data preparation for the plots

The data cover a period from `r min(covid_data$date)` to `r max(covid_data$date)`. Suppose we are interested in investigating countries with population more than 1 million up to June, 12 2021 and we want also to calculate the cases per 100000 inhabitants and tests per capita:

```{r}
dat <- covid_data |> 
  mutate(date = mdy(date),
         region = factor(region),
         income = factor(income),
         cases_per_100k = round(confirmed / population * 100000, digits = 1),
         tests_per_capita = round(total_tests / population, digits = 2)) |>
  filter(date == "2021-06-12", population > 1000000)
```

## Basic steps for creating a ggplot graph

The `{ggplot2}` is contained within the `{tidyverse}` package, so it is installed automatically when we install the tidyverse "meta" package. Furthermore, it is one of the core packages of the tidyverse that are loaded at R session when we run the command `library(tidyverse)`.

### Step 0: Start with a default blank ggplot object

```{r}
#| out-width: "80%"
#| label: fig-blank
#| fig-align: center
#| fig-cap: A default blank ggplot object.

ggplot()
```

### Step 1: Add the dataset and define the x and y

The `ggplot()` function has **two basic named arguments**. The first argument, `data`, specifies the dataset that we are going to use for the plot. The second argument, `mapping`, defines which variables are mapped to x and y aesthetics of position.

Let's provide the dataset "dat" to the first argument of `ggplot()` and mapp the variable `gdp_capita` to the x position and the variable `cases_per_100K` to the y position inside the `aes()`:

```{r p1}
#| out-width: "80%"
#| label: fig-map_xy
#| fig-align: center
#| fig-cap: Variables are mapped to x and y axes on a canvas with grid lines.

ggplot(data = dat, mapping = aes(x = gdp_capita, y = cases_per_100k))
```

Note that we don't usually have to spell out the names of the arguments `data` and `mapping`. Therefore, the following command is equivalent:

```{r}
#| eval: false

ggplot(dat, aes(x = gdp_capita, y = cases_per_100k))
```

As we can observe, only a grey canvas is created when running the code. This is because we also need to provide a geometry!

### Step 2: Add geometry

Geoms are the geometric objects that make up ggplot2 visualizations. Each geom is called with a function that begins with "**geom\_**" and ends with the name of the geometric object (e.g., point, bar, line) (@tbl-geometry).

| geom\_           |                   Example                   |
|------------------|:-------------------------------------------:|
| geom_point()     |   ![](images/geom_point.png){width="20%"}   |
| geom_line()      |   ![](images/geom_line.png){width="20%"}    |
| geom_text()      |   ![](images/geom_text.png){width="20%"}    |
| geom_label()     |   ![](images/geom_label.png){width="20%"}   |
| geom_histogram() | ![](images/geom_histogram.png){width="20%"} |
| geom_density()   |  ![](images/geom_density.png){width="20%"}  |
| geom_bar()       |    ![](images/geom_bar.png){width="20%"}    |
| geom_boxplot()   |  ![](images/geom_boxplot.png){width="20%"}  |

: Common geometries used in ggplot graphs. {#tbl-geometry}

Let's select which style we want to use. We are interested in exploring the association between two numeric variables with a scatter plot (see also [@sec-correlation]). So, we will add points using a geom layer called `geom_point`. In this case, `geom_point()` will inherit the `x` and `y` aesthetics from the `ggplot()` function:

```{r}
#| message: false
#| warning: false
#| source-line-numbers: "2"

ggplot(dat, aes(x = gdp_capita, y = cases_per_100k)) +
  geom_point()
```

### Step 3: Add aesthetics to geometry

Each "geom" has a number of aesthetics that define its visual properties. We can map our data to anything that our "geom" supports. For example, `geom_point()` understands the following aesthetics (required aesthetics are in bold): **x**, **y**, alpha, color, fill, group, shape, size, stroke.

So, if we want to add more variables to a plot, we can use aesthetics like color, shape, and size.

**A. `color` aesthetics**

Color is an important characteristic of graphs. If we decide to use color, we should consider which colors to use and where to use them. Color palettes (or colormaps) are classified into three main categories in `ggplot2`:

1.  **Sequential** (continuous or discrete) palette that is used for **quantitative** data. One variation of a unique color varying from dark to light (@fig-sequential).

```{r}
#| echo: false
#| out-width: "70%"
#| label: fig-sequential
#| fig-align: center
#| fig-cap: Example of sequential color scales.

knitr::include_graphics(here("images", "sequential.png"))
```

2.  **Diverging** palette that creates a gradient between three different colors, allowing us to easily identify low, middle, and high values within our data (@fig-gradient).

```{r}
#| echo: false
#| out-width: "70%"
#| label: fig-gradient
#| fig-align: center
#| fig-cap: Example diverging color scales.

knitr::include_graphics(here("images", "gradient.png"))
```

3.  **Qualitative** palette that is used mainly for discrete or **categorical** data. This palette is consisted from a discrete set of distinct colors with no implied order (@fig-qualitative).

```{r}
#| echo: false
#| out-width: "70%"
#| label: fig-qualitative
#| fig-align: center
#| fig-cap: Example qualitative color scales.

knitr::include_graphics(here("images", "qualitative.png"))
```

Now, suppose we want to group the points according to the categorical variable `region` using different colors, as follows:

```{r}
#| message: false
#| warning: false
#| source-line-numbers: "2"

ggplot(dat, aes(x = gdp_capita, y = cases_per_100k)) +
  geom_point(aes(color = region))        
```

Here, we added inside the `aes()` the color argument. The data of the categorical variable `region` mapped to color aesthetic of `geom_point`. Obviously, the qualitative palette of colors was applied automatically by `ggplot2`. Additionally, ggplot automatically created a legend to show the correspondence between the regions and colors.

It is crucial to understand the difference between including the color[^ggplot2-2] argument **inside** or **outside** of the `aes()` function. For example, let's run the following code:

[^ggplot2-2]: ggplot2 understands both color and colour as well as the short version col.

```{r}
#| message: false
#| warning: false
#| source-line-numbers: "2"

ggplot(dat, aes(x = gdp_capita, y = cases_per_100k)) +
  geom_point(color = "deeppink")
```

In this case, we set the color argument to a **fixed value** ("deeppink") in the geom function instead of using `aes()`, so ggplot changed the color of the points "globally".

In R, colors can be specified in quotes either by name (e.g., `"deeppink"`) or as a hexadecimal color (hex code) that starts with a `#` (e.g., `"#FF1493"`). In the following @tbl-colors we present an example of a color palette:

| Name                           | Hex code |
|:-------------------------------|:---------|
| $\color{#FF7F50}{coral}$       | #FF7F50  |
| $\color{#66CDAA}{aquamarine3}$ | #66CDAA  |
| $\color{#76EE00}{chartreuse2}$ | #76EE00  |
| $\color{#FFFF00}{yellow}$      | #FFFF00  |
| $\color{#0000FF}{blue}$        | #0000FF  |
| $\color{#A52A2A}{brown}$       | #A52A2A  |
| $\color{#FF1493}{deeppink}$    | #FF1493  |
| $\color{#000000}{black}$       | #000000  |

: Examples of name and hex color code of different colors. {#tbl-colors}

The main advantage of the Hex color system is that it is very compact and we can pick out any color we desire.

Â 

**B. `shape` aesthetics**

Alternatively, we can group the points according to the `region` variable using different point shapes, as follows:

```{r}
#| message: false
#| warning: false
#| source-line-numbers: "2"

ggplot(dat, aes(x = gdp_capita, y = cases_per_100k)) +
  geom_point(aes(shape = region))
```

We observe that `ggplot2` by default allows only six different point shapes to be displayed. However, we will see how to change this using appropriate `scales`.

The different points shapes symbols commonly used in R are shown in the @fig-shape_symbols below:

```{r}
#| echo: false
#| out-width: "80%"
#| label: fig-shape_symbols
#| fig-align: center
#| fig-cap: Points shapes symbols and their codes commonly used in R.


pchShow <- function(cex = 4, col = "black", bg = "gold", 
                    coltext = "black", cextext = 1.2,
                    main = paste("plot symbols :  points (...  pch = *, cex =", cex,")"))
{

  np  <- 26
  ipch <- 0:(np - 1)
  k <- floor(sqrt(np))
  dd <- c(-1,1)/2
  rx <- dd + range(ix <- ipch %/% k)
  ry <- dd + range(iy <- 3 + (k - 1) - ipch %% k)
  pch <- as.list(ipch) # list with integers & strings
  plot(rx, ry, type ="n", axes = FALSE, xlab = "", ylab = "", 
       main = main)
  abline(v = ix, h = iy, col = "lightgray", lty = "dotted")
  for (i in 1:np) {
    pc <- pch[[i]]
    ## 'col' symbols with a 'bg'-colored interior (where available) :
    points(ix[i], iy[i], pch = pc, col = col, bg = bg, cex = cex, lwd = 2)
    if (cextext > 0)
      text(ix[i], iy[i] -0.4, pc, col = coltext, cex = cextext)
  }
}
par(mar = c(0,0,0,0))
pchShow(main = NULL)

```

::: callout-important
-   The point shapes from 0 to 14 have an outline (we use `color` to change the color).
-   The point shapes from 15 to 20 are solid shapes (we use `color` to change color).
-   Point shapes options from 21 to 25 allow us to use both the outline and the inside color, so they can be controlled separately (we use `color` to change the color of the outline and `fill` to change the inside color).
:::

The default `geom_point()` uses the shape symbol 19 that is a solid circle. If we decide to use a shape symbol between 21 and 25, we can set `color` and `fill` aesthetics to each point. The following examples help us understand how to set the color and fill arguments for the shape symbol 24 that is a triangle:

::: panel-tabset
## shape 24

```{r}
#| message: false
#| warning: false

ggplot(dat, aes(x = gdp_capita, y = cases_per_100k)) +
  geom_point(shape = 24)
```

## shape 24 + color

```{r}
#| message: false
#| warning: false

ggplot(dat, aes(x = gdp_capita, y = cases_per_100k)) +
  geom_point(shape = 24, color = "red")
```

## shape 24 + color + fill

```{r}
#| message: false
#| warning: false

ggplot(dat, aes(x = gdp_capita, y = cases_per_100k)) +
  geom_point(shape = 24, color = "red", fill = "yellow")
```
:::

Â 

**C. `size` aesthetics**

Next, we can add a third variable `tests_per_capita` using the size aesthetic:

```{r}
#| message: false
#| warning: false
#| source-line-numbers: "2"

ggplot(dat, aes(x = gdp_capita, y = cases_per_100k)) +
  geom_point(aes(size = tests_per_capita))
```

## Add a new geom (text information for each point)

Let's add the name of the country for each data point. The `geom_text_repel()` function from the add-on package `{ggrepel}` allow us to add text labels for each data point that repel away from each other to avoid overlapping of the text.

```{r}
#| message: false
#| warning: false
#| source-line-numbers: "3"

ggplot(dat, aes(x = gdp_capita, y = cases_per_100k)) +
  geom_point(aes(size = tests_per_capita)) +
  geom_text_repel(aes(label = country), seed = 123)
```

## Change the default properties of the plot with *scales*

### Change the scale of the y axis

```{r}
#| message: false
#| warning: false
#| source-line-numbers: "4"

ggplot(dat, aes(x = gdp_capita, y = cases_per_100k)) +
  geom_point(aes(size = tests_per_capita)) +
  geom_text_repel(aes(label = country), seed = 123) +
  scale_y_log10()
```

Continuous variable `tests_per_capital` mapped to size and categorical variable `region` mapped to color.

### Change the default point shapes

```{r}
#| message: false
#| warning: false
#| label: fig-charts
#| fig-cap: "Change the default point shapes"
#| fig-subcap: 
#|   - "Default"
#|   - "Modified"
#| layout-ncol: 1
#| source-line-numbers: "3,9,12"

# default
ggplot(dat, aes(x = gdp_capita, y = cases_per_100k)) +
  geom_point(aes(size = tests_per_capita, shape= region)) +
  geom_text_repel(aes(label = country), seed = 123) +
  scale_y_log10()

# modified
ggplot(dat, aes(x = gdp_capita, y = cases_per_100k)) +
  geom_point(aes(size = tests_per_capita, shape= region)) +
  geom_text_repel(aes(label = country), seed = 123) +
  scale_y_log10() +
  scale_shape_manual(values = c(4, 9, 2, 1, 0, 19, 8))
```

However, when a variable is mapped to size (here, `test_per_capital`), it's a good idea to not map a variable to shape (here, `region`). This is because it is difficult to compare the sizes of different shapes (e.g., a size 4 square with a size 4 triangle).

### Change the default colors

```{r}
#| message: false
#| warning: false
#| label: fig-charts2
#| fig-cap: "Change the default colors"
#| fig-subcap: 
#|   - "Default"
#|   - "Modified"
#| layout-ncol: 1
#| source-line-numbers: "3,9,12"

# default
ggplot(dat, aes(x = gdp_capita, y = cases_per_100k)) +
  geom_point(aes(size = tests_per_capita, color = region)) +
  geom_text_repel(aes(label = country), seed = 123) +
  scale_y_log10()

# modified
ggplot(dat, aes(x = gdp_capita, y = cases_per_100k)) +
  geom_point(aes(size = tests_per_capita, color = region)) +
  geom_text_repel(aes(label = country), seed = 123) +
  scale_y_log10() +
  scale_color_jco()
```

## Modify axis, legend, and plot labels with *labs*

```{r}
#| message: false
#| warning: false
#| source-line-numbers: "6-13"

ggplot(dat, aes(x = gdp_capita, y = cases_per_100k)) +
  geom_point(aes(size = tests_per_capita, color = region)) +
  geom_text_repel(aes(label = country), seed = 123) +
  scale_y_log10() +
  scale_color_jco() +
  labs(x = "GDP per capita ($)",
       y = "Cases per 100,000 inhabitants",
       color = "Region",
       size = "Proportion tested",
       title = "Confirmed cases per 100,000 inhabitants, GDP per \ncapita, and COVID-19 testing rate by country", 
       subtitle = "May 20, 2021", 
       caption = "Source Data: Covid-19 related data from {tidycovid19} package",
       tag = 'A')
```

## Modify theme elements with *theme*

Theme elements are the **non-data** elements of a graph such as:

-   line
-   text
-   title, subtitle, caption
-   grid (major, minor)
-   background
-   ticks

::: callout-tip
## Syntax of the `theme()` function

The default display of theme elements can be override by using the `theme()` function which has two parts in structure, an **element name** and an **element function** in a form similar to:

> theme(**element name** = **element_function**(arguments))

***Element name***

We are able to modify the appearance of theme elements in **plot**, **panel**, **axis**, and **legend** compartments of a simple ggplot graph (@fig-compartments).

![Main compartments in a ggplot graph.](images/compartments.png){#fig-compartments width="90%"}

The theme system enables us to specify the display of elements for a particular compartment of the graph by creating **element names** in the general form of `compartment.element`. For example, we can specify the title in plot, axis, and legend with the element names `plot.title`, `axis.title`, and `legend.title`, respectfully.

***Element function***

Depending on the type of element that we want to modify, there are three pertinent functions that start with `element_`:

-   `element_line()`: specifies the display of lines
-   `element_text()`: specifies the display of text elements
-   `element_rect()`: specifies the display of borders and backgrounds

**NOTE**: (a) There is also the `element_blank()` that suppresses the appearance of elements we're not interested in. (b) Other features of the graph, such as the position of legend, are not specified within an `element_function`.

Â 

`r fa("arrow-right", fill = "orange")` Â  ***Example***

Suppose we want to change the color (from black to red) and the width of the x-axis line of our graph. The syntax would be similar to:

![Main compartments in a ggplot graph.](images/theme_ex.png){#fig-theme_ex width="90%"}
:::

Â 

Next, we present some examples for each element function to help understanding of the previous concepts.

### A. element_line()

With `element_line()`, we can customize all the lines of the plot that are not part of data. The @fig-element_line shows the basic line elements (axes, ticks, and grids) that we can control in a simple ggplot graph.

![Anatomy of Line Elements in ggplot2.](images/element_line.png){#fig-element_line width="100%"}

**1. The `X` and `Y` axes lines:**

-   both X and Y axes: `axis.line = element_line()`
-   only X axis:`axis.line.x = element_line()`
-   only Y axis:`axis.line.y = element_line()`

```{r}
#| echo: false
#| message: false
#| warning: false
#| out-width: "50%"
#| label: fig-linetypes
#| fig-align: center
#| fig-cap: dfsfdsfdsf.

tibble(y = 1:6, x = 0, xend = 1) %>%
  ggplot() +
  aes(x, y, xend = xend, yend = y, linetype = as.integer(y)) +
  geom_segment(size = 2) +
  theme_minimal(18) +
  scale_y_continuous(breaks = 1:6, trans = "reverse") +
  theme(
    plot.title = element_text("mono"),
    panel.grid = element_blank(), 
    axis.text.x = element_blank()
  ) +
  scale_linetype_identity() +
  labs(title = "linetype =", y = NULL, x = NULL)
```

`r fa("arrow-right", fill = "orange")` Â  ***Example***

```{r}
#| message: false
#| warning: false
#| label: fig-axis1
#| fig-align: center
#| fig-cap: fgdfgdfg.
#| source-line-numbers: "3-4"

ggplot(dat, aes(x = gdp_capita, y = cases_per_100k)) +
  geom_point() +
  theme(axis.line.x = element_line(color = "red", linewidth = 1),
        axis.line.y = element_line(color = "green", linewidth = 1, linetype = 5))
```

As we can observe, the default line type is a solid line (red x-axis line; `linetype = 1`). To change the line type, for example from solid to dashed line, we used the `linetype = 3` option (green y-axis line) (@fig-axis1).

**2. The ticks on `X` and `Y` axes:**

-   both X and Y ticks: `axis.ticks = element_line()`
-   only X ticks:`axis.ticks.x = element_line()`
-   only Y ticks:`axis.ticks.y = element_line()`

`r fa("arrow-right", fill = "orange")` Â  ***Example***

```{r}
#| message: false
#| warning: false
#| source-line-numbers: "3-4"

ggplot(dat, aes(x = gdp_capita, y = cases_per_100k)) +
  geom_point() +
  theme(axis.ticks.x = element_line(color = "red", linewidth = 5),
        axis.ticks.y = element_line(color = "green", linewidth = 5))
```

**3. The major and minor grid lines of the panel:**

**Major grid**

-   major grid lines (vertical and horizontal): `panel.grid.major = element_line()`
-   major vertical grid lines (cross `X`): `panel.grid.major.x = element_line()`
-   major horizontal grid lines (cross `Y`): `panel.grid.major.y = element_line()`

`r fa("arrow-right", fill = "orange")` Â  ***Example***

```{r}
#| message: false
#| warning: false
#| source-line-numbers: "3-4"

ggplot(dat, aes(x = gdp_capita, y = cases_per_100k)) +
  geom_point() +
  theme(panel.grid.major.x = element_line(color = "red", linewidth = 0.55),
        panel.grid.major.y = element_line(color = "green", linewidth = 0.55))
```

**Minor grid**

-   minor grid lines (vertical and horizontal): `panel.grid.minor = element_line()`
-   minor vertical grid lines (cross `X`): `panel.grid.minor.x = element_line()`
-   minor horizontal grid lines (cross `Y`): `panel.grid.minor.y = element_line()`

`r fa("arrow-right", fill = "orange")` Â  ***Example***

```{r}
#| message: false
#| warning: false
#| source-line-numbers: "3-4"

ggplot(dat, aes(x = gdp_capita, y = cases_per_100k)) +
  geom_point() +
  theme(panel.grid.minor.x = element_line(color = "red", linewidth = 0.35, linetype = 2),
        panel.grid.minor.y = element_line(color = "green", linewidth = 0.35, linetype = 2))
```

We can also modify the display of both major and minor grids of the ggplot.

`r fa("arrow-right", fill = "orange")` Â  ***Example***

```{r}
#| message: false
#| warning: false
#| source-line-numbers: "3-4"

ggplot(dat, aes(x = gdp_capita, y = cases_per_100k)) +
  geom_point() +
  theme(panel.grid.major = element_line(color = "blue", linewidth = 0.55),
        panel.grid.minor = element_line(color = "deeppink", linewidth = 0.35, linetype = 2))
```

### B. element_text()

![Anatomy of Text Elements in ggplot2.](images/element_text.png){#fig-element_text width="100%"}

**1. The title of `X` and `Y` axes:**

-   X axis:`axis.title.x = element_text()`
-   Y axis:`axis.title.y = element_text()`

`r fa("arrow-right", fill = "orange")` Â  ***Example***

```{r}
#| message: false
#| warning: false
#| label: fig-axis_title
#| fig-align: center
#| fig-cap: fgdfgdfg.
#| source-line-numbers: "11-12"

ggplot(dat, aes(x = gdp_capita, y = cases_per_100k)) +
  geom_point(aes(color = region)) +
   labs(x = "GDP per capita ($)",
       y = "Cases per 100,000 inhabitants",
       color = "Region",
       size = "Proportion tested",
       title = "Confirmed cases per 100,000 inhabitants, GDP per \ncapita, and COVID-19 testing rate by country", 
       subtitle = "May 20, 2021", 
       caption = "Source Data: Covid-19 related data",
       tag = 'A') +
  theme(axis.title.x = element_text(color = "red", size = 18, angle = 10),
        axis.title.y = element_text(color = "green", size = 10))
```

`r fa("arrow-right", fill = "orange")` Â  ***Example***

```{r}
#| message: false
#| warning: false
#| label: fig-axis_text
#| fig-align: center
#| fig-cap: fgdfgdfg.
#| source-line-numbers: "11-12"

ggplot(dat, aes(x = gdp_capita, y = cases_per_100k)) +
  geom_point(aes(color = region)) +
   labs(x = "GDP per capita ($)",
       y = "Cases per 100,000 inhabitants",
       color = "Region",
       size = "Proportion tested",
       title = "Confirmed cases per 100,000 inhabitants, GDP per \ncapita, and COVID-19 testing rate by country", 
       subtitle = "May 20, 2021", 
       caption = "Source Data: Covid-19 related data",
       tag = 'A') +
  theme(axis.text.x = element_text(color = "red", size = 16, face="bold", angle = 90),
        axis.text.y = element_text(color = "green", size = 10))
```

`r fa("arrow-right", fill = "orange")` Â  ***Example***

```{r}
#| message: false
#| warning: false
#| label: fig-plot_title
#| fig-align: center
#| fig-cap: fgdfgdfg.
#| source-line-numbers: "11-14"

ggplot(dat, aes(x = gdp_capita, y = cases_per_100k)) +
  geom_point(aes(color = region)) +
   labs(x = "GDP per capita ($)",
       y = "Cases per 100,000 inhabitants",
       color = "Region",
       size = "Proportion tested",
       title = "Confirmed cases per 100,000 inhabitants, GDP per \ncapita, and COVID-19 testing rate by country", 
       subtitle = "May 20, 2021", 
       caption = "Source Data: Covid-19 related data",
       tag = 'A') +
  theme(plot.title = element_text(color = "deeppink"),
        plot.subtitle = element_text(color = "blue"),
        plot.caption = element_text(color = "orange", size = 8),
        plot.tag = element_text(color = "green", size = 20))
```

`r fa("arrow-right", fill = "orange")` Â  ***Example***

```{r}
#| message: false
#| warning: false
#| label: fig-legend_title
#| fig-align: center
#| fig-cap: fgdfgdfg.
#| source-line-numbers: "11-12"

ggplot(dat, aes(x = gdp_capita, y = cases_per_100k)) +
  geom_point(aes(color = region)) +
   labs(x = "GDP per capita ($)",
       y = "Cases per 100,000 inhabitants",
       color = "Region",
       size = "Proportion tested",
       title = "Confirmed cases per 100,000 inhabitants, GDP per \ncapita, and COVID-19 testing rate by country", 
       subtitle = "May 20, 2021", 
       caption = "Source Data: Covid-19 related data",
       tag = 'A') +
  theme(legend.title = element_text(color = "red", size = 16),
        legend.text = element_text(color = "green", size = 10))
```

### C. element_rect()

![Anatomy of Text Elements in ggplot2.](images/element_rect.png){#fig-element_rect width="100%"}

`r fa("arrow-right", fill = "orange")` Â  ***Example***

```{r}
#| message: false
#| warning: false
#| label: fig-plot_background
#| fig-align: center
#| fig-cap: fgdfgdfg.
#| source-line-numbers: "11-12"

ggplot(dat, aes(x = gdp_capita, y = cases_per_100k)) +
  geom_point(aes(color = region)) +
   labs(x = "GDP per capita ($)",
       y = "Cases per 100,000 inhabitants",
       color = "Region",
       size = "Proportion tested",
       title = "Confirmed cases per 100,000 inhabitants, GDP per \ncapita, and COVID-19 testing rate by country", 
       subtitle = "May 20, 2021", 
       caption = "Source Data: Covid-19 related data",
       tag = 'A') +
  theme(plot.background = element_rect(fill = "deeppink"))
```

`r fa("arrow-right", fill = "orange")` Â  ***Example***

```{r}
#| message: false
#| warning: false
#| label: fig-panel_background
#| fig-align: center
#| fig-cap: fgdfgdfg.
#| source-line-numbers: "11-12"

ggplot(dat, aes(x = gdp_capita, y = cases_per_100k)) +
  geom_point(aes(color = region)) +
   labs(x = "GDP per capita ($)",
       y = "Cases per 100,000 inhabitants",
       color = "Region",
       size = "Proportion tested",
       title = "Confirmed cases per 100,000 inhabitants, GDP per \ncapita, and COVID-19 testing rate by country", 
       subtitle = "May 20, 2021", 
       caption = "Source Data: Covid-19 related data",
       tag = 'A') +
  theme(panel.background = element_rect(fill = "deeppink"))
```

`r fa("arrow-right", fill = "orange")` Â  ***Example***

```{r}
#| message: false
#| warning: false
#| label: fig-legend_background
#| fig-align: center
#| fig-cap: fgdfgdfg.
#| source-line-numbers: "11-12"

ggplot(dat, aes(x = gdp_capita, y = cases_per_100k)) +
  geom_point(aes(color = region)) +
   labs(x = "GDP per capita ($)",
       y = "Cases per 100,000 inhabitants",
       color = "Region",
       size = "Proportion tested",
       title = "Confirmed cases per 100,000 inhabitants, GDP per \ncapita, and COVID-19 testing rate by country", 
       subtitle = "May 20, 2021", 
       caption = "Source Data: Covid-19 related data",
       tag = 'A') +
  theme(legend.background = element_rect(fill = "deeppink"))
```

`r fa("arrow-right", fill = "orange")` Â  ***Example***

```{r}
#| message: false
#| warning: false
#| label: fig-legend_key
#| fig-align: center
#| fig-cap: fgdfgdfg.
#| source-line-numbers: "11-12"

ggplot(dat, aes(x = gdp_capita, y = cases_per_100k)) +
  geom_point(aes(color = region)) +
   labs(x = "GDP per capita ($)",
       y = "Cases per 100,000 inhabitants",
       color = "Region",
       size = "Proportion tested",
       title = "Confirmed cases per 100,000 inhabitants, GDP per \ncapita, and COVID-19 testing rate by country", 
       subtitle = "May 20, 2021", 
       caption = "Source Data: Covid-19 related data",
       tag = 'A') +
  theme(legend.key = element_rect(fill = "deeppink"))
```

## Themes

### Default ggplot theme

The default theme of ggplot is the `theme_gray`:

```{r}
#| message: false
#| warning: false
#| label: fig-ggthemes0
#| fig-align: center
#| fig-cap: fgdfgdfg.
#| fig-height: 12
#| fig-width: 12


ggplot(dat, aes(x = gdp_capita, y = cases_per_100k)) +
  geom_point(aes(size = tests_per_capita, color = region)) +
  geom_text_repel(aes(label = country), 
                  min.segment.length = 0, seed = 42, 
                  box.padding = 0.1, color = "black", size = 5) +
  scale_y_log10() +
  labs(x = "GDP per capita ($)",
       y = "Cases per 100,000 inhabitants (log scale)",
       color = "Region",
       size = "Proportion tested",
       title = "Confirmed cases per 100,000 inhabitants, GDP per capita, and COVID-19 testing rate by country", 
       subtitle = "May 20, 2021", 
       caption = "Source Data: Covid-19 related data Jonhs Hopkins University")
```

### Predefined theme

We can customize the theme elements of our graph by applying a predefined theme rather than changing everything by hand. There are ready to use themes from the `{ggplot2}` and `{ggthemes}` packages.

Examples of in-build theme from "ggplot2":

-   **theme_bw()** -- dark on light ggplot2 theme
-   **theme_dark()** -- lines on a dark background instead of light
-   **theme_minimal()** -- no background annotations, minimal feel.
-   **theme_classic()** -- theme with no grid lines.
-   **theme_void()** -- empty theme with no elements

Examples of themes from "ggthemes":

-   **theme_economist()** -- theme approximates the style of "[The Economist](https://www.economist.com/)".
-   **theme_excel_new()** -- theme based on current Excel plot defaults.
-   **theme_fivethirtyeight()** -- theme inspired by [FiveThirtyEight](http://fivethirtyeight.com) plots.
-   **theme_gdocs()** -- theme based on Google Docs Chart defaults.
-   **theme_hc()** -- theme based on [Highcharts](https://www.highcharts.com/) plots.

In our case, we will use the `theme_fivethirtyeight()` from the "ggthemes" to understand how we can handle default themes.

```{r}
#| message: false
#| warning: false
#| label: fig-ggthemes
#| fig-align: center
#| fig-cap: fgdfgdfg.
#| fig-height: 12
#| fig-width: 12
#| source-line-numbers: "14"

ggplot(dat, aes(x = gdp_capita, y = cases_per_100k)) +
  geom_point(aes(size = tests_per_capita, color = region)) +
  geom_text_repel(aes(label = country), 
                  min.segment.length = 0, seed = 42, 
                  box.padding = 0.1, color = "black", size = 5) +
  scale_y_log10() +
  labs(x = "GDP per capita ($)",
       y = "Cases per 100,000 inhabitants (log scale)",
       color = "Region",
       size = "Proportion tested",
       title = "Confirmed cases per 100,000 inhabitants, GDP per capita, and COVID-19 testing rate by country", 
       subtitle = "May 20, 2021", 
       caption = "Source Data: Covid-19 related data Jonhs Hopkins University") +
  theme_fivethirtyeight()
```

If we take a look at the code for `theme_fivethirtyeight` (we just run `theme_fivethirtyeight` in our console to see the code), we'll observe that `axis.title` is set to `element_blank()`. So this theme has no axis titles by default. We'll need to change this if we want to set X and Y axis titles. You can turn them back on with theme(axis.title = element_text()) you need to change some of the theme settings that are the defaults in theme_fivethirtyeight.

### Publication Quality Figure

More customization of plot

```{r}
#| message: false
#| warning: false
#| label: fig-ggthemes2
#| fig-align: center
#| fig-cap: fgdfgdfg.
#| fig-height: 12
#| fig-width: 12
#| source-line-numbers: "2,3,8,16-20"


ggplot(dat, aes(x = gdp_capita, y = cases_per_100k)) +
  geom_smooth(color = "red") +
  geom_point(aes(size = tests_per_capita, color = region), shape = 1, stroke = 2) +
  geom_text_repel(aes(label = country), 
                  min.segment.length = 0, seed = 42, 
                  box.padding = 0.1, color = "black", size = 5) +
  scale_y_log10() +
  scale_color_jco() +
  labs(x = "GDP per capita ($)",
       y = "Cases per 100,000 inhabitants (log scale)",
       color = "Region",
       size = "Proportion tested",
       title = "Confirmed cases per 100,000 inhabitants, GDP per capita, and COVID-19 testing rate by country", 
       subtitle = "May 20, 2021", 
       caption = "Source Data: Covid-19 related data Jonhs Hopkins University") +
  theme_fivethirtyeight(base_size = 16) +
  theme(plot.title = element_text(size = 17),
        axis.title = element_text(face = "bold"),
        legend.title = element_text(face = "bold")) +
  guides(color = guide_legend(override.aes = list(size = 4)))
```



```{r}
#| message: false
#| warning: false
#| label: fig-ggthemes3
#| fig-align: center
#| fig-cap: fgdfgdfg.
#| fig-height: 12
#| fig-width: 12
#| source-line-numbers: "2,7"

ggplot(dat, aes(x = gdp_capita, y = cases_per_100k)) +
  geom_smooth(method = lm, color = "red") +
  geom_point(aes(size = tests_per_capita, color = region), shape = 1, stroke = 2) +
  geom_text_repel(aes(label = country), 
                  min.segment.length = 0, seed = 42, 
                  box.padding = 0.1, color = "black", size = 5) +
  scale_x_log10() +
  scale_y_log10() +
  scale_color_jco() +
  labs(x = "GDP per capita ($) (log scale)",
       y = "Cases per 100,000 inhabitants (log scale)",
       color = "Region",
       size = "Proportion tested",
       title = "Confirmed cases per 100,000 inhabitants, GDP per capita, and COVID-19 testing rate by country", 
       subtitle = "May 20, 2021", 
       caption = "Source Data: Covid-19 related data Jonhs Hopkins University") +
  theme_fivethirtyeight(base_size = 16) +
  theme(plot.title = element_text(size = 17),
        axis.title = element_text(face = "bold"),
        legend.title = element_text(face = "bold")) +
  guides(color = guide_legend(override.aes = list(size = 4)))
```






